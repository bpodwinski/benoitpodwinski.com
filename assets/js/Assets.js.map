{"version":3,"sources":["Assets.js"],"names":["Assets","cubeMaps","destroyMesh","mesh","textureToo","geometry","dispose","material","tex","map","materials","needsUpdate","image","init","textureCube","destroy","object","children","length","objects","remove","getCubeMap","i","cubeMap","THREE","Texture","format","RGBFormat","flipY","envMaps","file","size","glow","loader","ImageLoader","load","getSide","x","y","canvas","document","createElement","width","height","getContext","drawImage"],"mappings":"AAAA,IAAIA,OAAS,WAET,IACIC,EAAS,GAgEb,SAASC,EAAYC,EAAMC,GAGvB,GAFID,EAAKE,UACLF,EAAKE,SAASC,UACbH,EAAKI,SAAV,CAEA,IAAIC,EAAML,EAAKI,SAASE,KACnBD,GAAOL,EAAKI,SAASG,YACtBF,EAAML,EAAKI,SAASG,UAAU,GAAGD,KAEjCD,GAAOJ,IACPI,EAAIG,aAAc,EAClBH,EAAIF,UACJE,EAAII,MAAQ,KACZJ,EAAM,MAENL,EAAKI,SAASG,YACdP,EAAKI,SAASG,UAAU,GAAGJ,UAC3BH,EAAKI,SAASG,UAAU,GAAGJ,UAC3BH,EAAKI,SAASG,UAAU,GAAK,KAC7BP,EAAKI,SAASG,UAAU,GAAK,MAE7BP,EAAKI,SAASD,SACdH,EAAKI,SAASD,UAElBH,EAAKI,SAAW,KAEhBC,EADAL,EAAKE,SAAW,MAIpB,MAAO,CACHQ,KA5FJ,aA6FIC,YAAa,aAGbC,QA5FJ,SAAiBC,EAAQZ,GACrB,GAA6B,EAAzBY,EAAOC,SAASC,OAAY,CAC5B,IAAIC,EAAU,CAACH,EAAOC,SAAS,GAAID,EAAOC,SAAS,IAEnDD,EAAOI,OAAOD,EAAQ,IACtBH,EAAOI,OAAOD,EAAQ,IAEtBjB,EAAYiB,EAAQ,GAAIf,GACxBF,EAAYiB,EAAQ,GAAIf,QAExBF,EAAYc,EAAQZ,IAmFxBiB,WA/EJ,SAAoBC,GAEhB,GAAGrB,EADD,GAEE,OAAOA,EAFT,GAIF,IAAIsB,EAAU,IAAIC,MAAMC,QAAQ,IAChCF,EAAQG,OAASF,MAAMG,UACvBJ,EAAQK,OAAQ,EAEhB,IAAIC,EAAU,CACV,CAACC,KAAM,uBAAwBC,KAAM,KAAMC,KAAM,KAGjDC,EAAS,IAAIT,MAAMU,YACnBJ,EAAOD,EAbT,GAaoBC,KAClBC,EAAOF,EAdT,GAcoBE,KA0BtB,OAzBAE,EAAOE,KAAKL,EAAM,SAAUlB,GACV,SAAVwB,EAAoBC,EAAGC,GAEvB,IAAIC,EAASC,SAASC,cAAc,UAOpC,OANAF,EAAOG,MAAQX,EACfQ,EAAOI,OAASZ,EAEFQ,EAAOK,WAAW,MACxBC,UAAUjC,GAAQyB,EAAIN,GAAOO,EAAIP,GAElCQ,EAIXhB,EAAQX,MAAO,GAAMwB,EAAQ,EAAG,GAChCb,EAAQX,MAAO,GAAMwB,EAAQ,EAAG,GAChCb,EAAQX,MAAO,GAAMwB,EAAQ,EAAG,GAChCb,EAAQX,MAAO,GAAMwB,EAAQ,EAAG,GAChCb,EAAQX,MAAO,GAAMwB,EAAQ,EAAG,GAChCb,EAAQX,MAAO,GAAMwB,EAAQ,EAAG,GAChCb,EAAQZ,aAAc,IAI1BV,EAvCE,GAuCUsB,IA/DP","file":"Assets.js","sourcesContent":["var Assets = function () {\n\n    var textureCube;\n    var cubeMaps=[]\n\n    function init() {\n\n    }\n\n    function destroy(object, textureToo) {\n        if (object.children.length > 0) {\n            var objects = [object.children[1], object.children[0]]\n\n            object.remove(objects[0]);\n            object.remove(objects[1]);\n\n            destroyMesh(objects[0], textureToo)\n            destroyMesh(objects[1], textureToo)\n        } else {\n            destroyMesh(object, textureToo)\n        }\n    }\n    \n    function getCubeMap(i) {\n        i=0\n        if(cubeMaps[i])\n            return cubeMaps[i]\n        \n        var cubeMap = new THREE.Texture([]);\n        cubeMap.format = THREE.RGBFormat;\n        cubeMap.flipY = false;\n\n        var envMaps = [\n            {file: \"/assets/img/skin.jpg\", size: 1024, glow: .2},\n        ];\n\n        var loader = new THREE.ImageLoader();\n        var file = envMaps[i].file;\n        var size = envMaps[i].size;\n        loader.load(file, function (image) {\n            var getSide = function (x, y) {\n\n                var canvas = document.createElement('canvas');\n                canvas.width = size;\n                canvas.height = size;\n\n                var context = canvas.getContext('2d');\n                context.drawImage(image, -x * size, -y * size);\n\n                return canvas;\n\n            };\n\n            cubeMap.image[ 0 ] = getSide(2, 1); // px\n            cubeMap.image[ 1 ] = getSide(0, 1); // nx\n            cubeMap.image[ 2 ] = getSide(1, 0); // py\n            cubeMap.image[ 3 ] = getSide(1, 2); // ny\n            cubeMap.image[ 4 ] = getSide(1, 1); // pz\n            cubeMap.image[ 5 ] = getSide(3, 1); // nz\n            cubeMap.needsUpdate = true;\n\n        });\n\n        cubeMaps[i]=cubeMap\n        return cubeMap;\n    }\n\n    function destroyMesh(mesh, textureToo) {\n        if (mesh.geometry)\n            mesh.geometry.dispose();\n        if (!mesh.material)\n            return;\n        var tex = mesh.material.map\n        if (!tex && mesh.material.materials)\n            tex = mesh.material.materials[1].map\n        //console.log(mesh.material.map)\n        if (tex && textureToo) {\n            tex.needsUpdate = false;\n            tex.dispose();\n            tex.image = null\n            tex = null;\n        }\n        if (mesh.material.materials) {\n            mesh.material.materials[1].dispose();\n            mesh.material.materials[0].dispose();\n            mesh.material.materials[1] = null;\n            mesh.material.materials[0] = null;\n        }\n        if (mesh.material.dispose)\n            mesh.material.dispose();\n\n        mesh.material = null;\n        mesh.geometry = null;\n        tex = null;\n    }\n\n    return {\n        init: init,\n        textureCube: function () {\n            return textureCube;\n        },\n        destroy: destroy,\n        getCubeMap: getCubeMap\n    };\n\n}();"]}