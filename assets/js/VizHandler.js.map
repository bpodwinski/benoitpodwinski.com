{"version":3,"sources":["VizHandler.js"],"names":["VizHandler","camera","scene","renderer","controls","mobile","directionalLight","fullscreen","WIDTH","window","innerWidth","HEIGHT","innerHeight","updateShadow","shadowMap","needsUpdate","update","position","set","translateZ","init","id","parseInt","location","hash","substr","ControlsHandler","fxParams","song","events","on","container","document","createElement","body","appendChild","THREE","WebGLRenderer","antialias","setSize","setClearColor","enabled","autoUpdate","gammaInput","gammaOutput","domElement","Scene","PerspectiveCamera","y","z","fog","Fog","OrbitControls","target","autoRotate","enablePan","enableZoom","enableRotate","enableDamping","dampingFactor","rotateSpeed","Assets","DirectionalLight","x","castShadow","shadow","near","far","roz","left","right","top","bottom","mapSize","width","height","bias","hemiLight","HemisphereLight","color","setHSL","groundColor","CameraHelper","add","activeViz","Mecha","activeVizCount","length","j","TweenMax","delayedCall","getCamera","getScene","getLight","getRenderer","getCubeCameras","cubeCameraRead","cubeCameraWrite","getControls","onResize","renderW","renderH","vizParams","fullSize","showControls","$","css","FIXED_SIZE_H","aspect","updateProjectionMatrix","isFullscreen","isMobile"],"mappings":"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","file":"VizHandler.js","sourcesContent":["//VizHandler\n//Handle 3D world\nvar VizHandler = function () {\n\n    var rendertime = 0; //constantly incrementing value public\n    var camera, scene, renderer, controls, fullscreen = false;\n    var cubeCameraRead, cubeCameraWrite;\n    var debugCube;\n    var renderToggle = true;\n    var mobile\n\n    var BG_COLOR = 0x000000;\n    var directionalLight;\n\n    var WIDTH = window.innerWidth;\n    var HEIGHT = window.innerHeight;\n\n    function init() {\n\n        var id = parseInt(window.location.hash.substr(1))\n        if (!id)\n            id = 1\n        ControlsHandler.fxParams.song = id;\n\n        //EVENT HANDLERS\n        events.on(\"update\", update);\n\n        // var container = document.getElementById('viz')\n        //document.body.appendChild(container);\n\n        container = document.createElement('div');\n        document.body.appendChild(container);\n\n        //RENDERER\n        renderer = new THREE.WebGLRenderer({\n            antialias: true\n        });\n        renderer.setSize(WIDTH, HEIGHT);\n        renderer.setClearColor(BG_COLOR);\n        renderer.shadowMap.enabled = true;\n        renderer.shadowMap.autoUpdate = true;\n        //renderer.shadowMap.needsUpdate = true;\n        //renderer.autoClear = false;\n\n        //renderer.shadowMap.type = THREE.PCFShadowMap;\n        renderer.gammaInput = true;\n        renderer.gammaOutput = true;\n        //renderer.sortObjects = false;\n        container.appendChild(renderer.domElement);\n\n        scene = new THREE.Scene();\n        //3D SCENE\n        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, .1, 2000);\n        camera.position.y = 2.5;\n        camera.position.z = 2;\n        //scene.add(camera);\n\n        scene.fog = new THREE.Fog(BG_COLOR, 1, 8);\n\n        //controls = new THREE.TrackballControls(camera);\n        controls = new THREE.OrbitControls(camera);\n        controls.target.set(0, 0, 0);\n        controls.update();\n        controls.autoRotate = false;\n        controls.enablePan = false;\n        controls.enableZoom = true;\n        controls.enableRotate = false\n        controls.enableDamping = true;\n        controls.dampingFactor = .2;\n        controls.rotateSpeed = .5;\n        //controls.autoRotateSpeed = (Math.random() * .5 - .25) / 7;\n        //controls.minDistance = 3;\n        //controls.maxDistance = 3;\n        //controls.maxPolarAngle = Math.PI / 2 + .4;\n        //controls.minPolarAngle = Math.PI / 2 - .4;\n\n        Assets.init();\n\n        directionalLight = new THREE.DirectionalLight(0xffffff, .5);\n        directionalLight.position.x = .8\n        directionalLight.position.z = -.9\n        directionalLight.position.y = .8\n        directionalLight.castShadow = true;\n        var roz = 4\n        directionalLight.shadow.camera.near = -roz * 2\n        directionalLight.shadow.camera.far = roz * 2\n        directionalLight.shadow.camera.left = -roz\n        directionalLight.shadow.camera.right = roz\n        directionalLight.shadow.camera.top = roz\n        directionalLight.shadow.camera.bottom = -roz\n        directionalLight.shadow.mapSize.width = 1024;\n        directionalLight.shadow.mapSize.height = 1024;\n        directionalLight.shadow.bias = 0.0001\n\n        //scene.add(new THREE.CameraHelper(directionalLight.shadow.camera))\n\n        //scene.add(new THREE.AmbientLight(0x777777));\n\n        hemiLight = new THREE.HemisphereLight(0xffffff, 0x666666, 0.6);\n        hemiLight.color.setHSL(0.6, 1, 0.8);\n        hemiLight.groundColor.setHSL(0.095, 1, 0.9);\n        hemiLight.position.set(0, 10, 0);\n        //scene.add(hemiLight);\n\n        var helper = new THREE.CameraHelper(directionalLight.shadow.camera);\n        //scene.add(helper);\n\n        //directionalLight.position.set(1, 1, .65);\n        scene.add(directionalLight);\n\n        activeViz = [Mecha];\n\n        activeVizCount = activeViz.length;\n        for (var j = 0; j < activeVizCount; j++) {\n            activeViz[j].init();\n        }\n\n        //window.addEventListener('deviceorientation', setOrientationControls, true);\n\n        TweenMax.delayedCall(.1, updateShadow)\n    }\n\n    function updateShadow() {\n        renderer.shadowMap.needsUpdate = true;\n    }\n\n    function remake() {\n        for (var j = 0; j < activeVizCount; j++) {\n            activeViz[j].reload();\n        }\n        controls.autoRotateSpeed = Math.random() * .5 - .25\n        TweenMax.delayedCall(5, remake)\n    }\n\n    function setOrientationControls(e) {\n        if (!e.alpha) {\n            return;\n        }\n\n        controls.enabled = false\n        controls = new THREE.DeviceOrientationControls(camera, true);\n        controls.connect();\n        controls.update();\n\n        window.removeEventListener('deviceorientation', setOrientationControls, true);\n\n        if (renderer.domElement) {\n            renderer.domElement.addEventListener('click', function () {\n\n                if (this.requestFullscreen) {\n                    this.requestFullscreen();\n                } else if (this.msRequestFullscreen) {\n                    this.msRequestFullscreen();\n                } else if (this.mozRequestFullScreen) {\n                    this.mozRequestFullScreen();\n                } else if (this.webkitRequestFullscreen) {\n                    this.webkitRequestFullscreen();\n                }\n                fullscreen = true;\n\n            });\n\n            mobile = true;\n\n        }\n    }\n\n    function update() {\n        controls.update();\n\n        if (mobile) {\n            camera.position.set(0, 0, 0)\n            camera.translateZ(1.8);\n        }\n    }\n\n\n    function onResize() {\n\n        var renderW = 1920;\n        var renderH = 1080;\n\n        if (ControlsHandler.vizParams.fullSize) {\n            var renderW = window.innerWidth;\n            var renderH = window.innerHeight;\n\n            if (ControlsHandler.vizParams.showControls) {\n                renderW -= 250;\n            }\n            $('#viz').css({position: 'relative', top: 0});\n\n        } else {\n            //vertically center viz output\n            $('#viz').css({position: 'relative', top: window.innerHeight / 2 - FIXED_SIZE_H / 2});\n        }\n\n        camera.aspect = renderW / renderH;\n        camera.updateProjectionMatrix();\n        renderer.setSize(renderW, renderH);\n\n    }\n\n    return {\n        init: init,\n        update: update,\n        getCamera: function () {\n            return camera;\n        },\n        getScene: function () {\n            return scene;\n        },\n        getLight: function () {\n            return directionalLight;\n        },\n        getRenderer: function () {\n            return renderer;\n        },\n        getCubeCameras: function () {\n            return [cubeCameraRead, cubeCameraWrite]\n        },\n        getControls: function () {\n            return controls;\n        },\n        onResize: onResize,\n        isFullscreen: function () {\n            return fullscreen;\n        },\n        isMobile: function () {\n            return mobile;\n        }\n    };\n\n}();"]}