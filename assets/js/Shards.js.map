{"version":3,"sources":["Shards.js"],"names":["Shards","full","material","reload","VizHandler","getScene","remove","geometry","dispose","geo","THREE","BoxGeometry","group","Object3D","j","r","tpos","Vector3","set","Math","random","ran","i","cube","Mesh","position","add","scr0","scr1","scr2","scale","castShadow","receiveShadow","geom","Geometry","children","length","updateMatrix","merge","matrix","vertices","v","x","y","z","computeFaceNormals","computeVertexNormals","getRenderer","shadowMap","needsUpdate","update","onBeat","init","events","on","SmoothShading","reflectionCube","Assets","getCubeMap","format","RGBFormat","MeshStandardMaterial","bumpScale","metalness","fog","roughness","shading","FlatShading","envMap","generate"],"mappings":"AAAA,IAAIA,OAAS,WACT,IAKIC,EAWAC,EAuCJ,SAASC,IACDF,IACAG,WAAWC,WAAWC,OAAOL,GAC7BA,EAAKM,SAASC,UACdP,EAAO,MAMX,IAHA,IAAIQ,EAAM,IAAIC,MAAMC,YAAY,GAAI,GAAI,GAAI,EAAG,EAAG,GAC9CC,EAAQ,IAAIF,MAAMG,SAEbC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAIC,EAAI,GACJC,EAAO,IAAIN,MAAMO,QACZ,GAALH,GACAE,EAAKE,KAAKC,KAAKC,SAAW,IAAML,GAAII,KAAKC,SAAW,IAAML,GAAII,KAAKC,SAAW,IAAML,GAExF,IADA,IAAIM,EAAkB,EAAdF,KAAKC,SACJE,EAAI,EAAGA,EAAID,EAAKC,IAAK,CAC1B,IAAIC,EAAO,IAAIb,MAAMc,KAAKf,EAAKP,GAC3Ba,EAAI,GAAK,GAAKI,KAAKC,SACvBG,EAAKE,SAASP,KAAKC,KAAKC,SAAW,IAAML,GAAII,KAAKC,SAAW,IAAML,GAAII,KAAKC,SAAW,IAAML,GAC7FQ,EAAKE,SAASC,IAAIV,GAClB,IAAIW,EAAOR,KAAKC,SACZQ,EAAOT,KAAKC,SACZS,EAAOV,KAAKC,SAChBG,EAAKO,MAAMZ,IAAIS,EAAMC,EAAMC,GAC3BjB,EAAMc,IAAIH,GACVA,EAAKQ,YAAa,EAClBR,EAAKS,eAAgB,GAK7B,IAAIC,EAAO,IAAIvB,MAAMwB,SACrB,IAASZ,EAAI,EAAGA,EAAIV,EAAMuB,SAASC,OAAQd,IACvCV,EAAMuB,SAASb,GAAGe,eAClBJ,EAAKK,MAAM1B,EAAMuB,SAASb,GAAGf,SAAUK,EAAMuB,SAASb,GAAGiB,QAI7D,IAASjB,EAAI,EAAGA,EAAIW,EAAKO,SAASJ,OAAQd,IAAK,CAC3C,IAAImB,EAAIR,EAAKO,SAASlB,GACtBmB,EAAEC,GAHI,IAGEvB,KAAKC,SAAW,IACxBqB,EAAEE,GAJI,IAIExB,KAAKC,SAAW,IACxBqB,EAAEG,GALI,IAKEzB,KAAKC,SAAW,IAG5Ba,EAAKY,qBACLZ,EAAKa,wBAEL7C,EAAO,IAAIS,MAAMc,KAAKS,EAAM/B,IACvB6B,YAAa,EAClB9B,EAAK+B,eAAgB,EACrB5B,WAAWC,WAAWqB,IAAIzB,GAE1BG,WAAW2C,cAAcC,UAAUC,aAAc,EAGrD,SAASC,KAGT,SAASC,KAMT,MAAO,CACHC,KAxGJ,WAGIC,OAAOC,GAAG,SAAUJ,GACpBG,OAAOC,GAAG,SAAUH,GAGiDzC,MAAM6C,cAA3E,IACIC,EAAiBC,OAAOC,WAAW,IACvCF,EAAeG,OAASjD,MAAMkD,UAI9B1D,EAAW,IAAIQ,MAAMmD,qBAAqB,CACtCC,UAPiD,KAQjDC,UAJY,EAKZC,KAAK,EACLC,UAPY,EAQZC,QAASxD,MAAMyD,YACfC,OAAQZ,IAeZrD,KAuEA+C,OAAQA,EACRC,OAAQA,EACRkB,SAPJ,aAQIlE,OAAQA,GA/HH","file":"Shards.js","sourcesContent":["var Shards = function () {\n    var groupHolder;\n    var multiMaterial\n\n    var drewNewShape = false;\n    var scl = 0;\n    var full;\n    var spd = 0;\n    var mod = 0;\n    var speed = .035;\n    var back = false;\n    var main;\n    var timeout\n    var flotilla = []\n    var isMobile = {any: false};\n    var plane;\n    var rings = []\n    var material\n    var time = 0\n    function init() {\n\n        //init event listeners\n        events.on(\"update\", update);\n        events.on(\"onBeat\", onBeat);\n\n\n        var shininess = 50, specular = 0xffffff, bumpScale = .055, shading = THREE.SmoothShading;\n        var reflectionCube = Assets.getCubeMap(12)\n        reflectionCube.format = THREE.RGBFormat;\n        var roughness = 0;\n        var metalness = 1;\n        //var diffuseColor = new THREE.Color(.1,.1,.1);\n        material = new THREE.MeshStandardMaterial({\n            bumpScale: bumpScale,\n            metalness: metalness,\n            fog: false,\n            roughness: roughness,\n            shading: THREE.FlatShading,\n            envMap: reflectionCube,\n            //side: THREE.DoubleSide,\n            //map: new THREE.TextureLoader().load(\"2708diffuse.jpg\"),\n            //alphaMap: new THREE.TextureLoader().load(\"textures/op.png\"),\n            //transparent:true,\n            //normalMap: new THREE.TextureLoader().load(\"2708normal.jpg\"),\n            //bumpMap: texture,\n            //emissive: 0x111111,\n            //metalnessMap:texture,\n            //lightMap:texture,\n            //depthWrite:false,\n            //depthTest:false,\n            //blendEquation:THREE.MinEquation\n        })\n        \n        reload()\n    }\n\n    function reload() {\n        if (full) {\n            VizHandler.getScene().remove(full);\n            full.geometry.dispose();\n            full = null;\n        }\n\n        var geo = new THREE.BoxGeometry(.1, .1, .1, 1, 1, 1)\n        var group = new THREE.Object3D();\n        \n        for (var j = 0; j < 400; j++) {\n            var r = 15\n            var tpos = new THREE.Vector3()\n            if (j != 0)\n                tpos.set((Math.random() - .5) * r, (Math.random() - .5) * r, (Math.random() - .5) * r)\n            var ran=Math.random()*5\n            for (var i = 0; i < ran; i++) {\n                var cube = new THREE.Mesh(geo, material)\n                var r = .2 + .4 * Math.random()\n                cube.position.set((Math.random() - .5) * r, (Math.random() - .5) * r, (Math.random() - .5) * r)\n                cube.position.add(tpos)\n                var scr0 = Math.random()\n                var scr1 = Math.random()\n                var scr2 = Math.random()\n                cube.scale.set(scr0, scr1, scr2)\n                group.add(cube)\n                cube.castShadow = true;\n                cube.receiveShadow = true;\n            }\n        }\n\n\n        var geom = new THREE.Geometry()\n        for (var i = 0; i < group.children.length; i++) {\n            group.children[i].updateMatrix();\n            geom.merge(group.children[i].geometry, group.children[i].matrix);\n        }\n\n        var mod = .1\n        for (var i = 0; i < geom.vertices.length; i++) {\n            var v = geom.vertices[i]\n            v.x += (Math.random() - .5) * mod\n            v.y += (Math.random() - .5) * mod\n            v.z += (Math.random() - .5) * mod\n        }\n\n        geom.computeFaceNormals();\n        geom.computeVertexNormals();\n\n        full = new THREE.Mesh(geom, material)\n        full.castShadow = true;\n        full.receiveShadow = true;\n        VizHandler.getScene().add(full)\n\n        VizHandler.getRenderer().shadowMap.needsUpdate = true;\n    }\n\n    function update() {\n    }\n\n    function onBeat() {\n    }\n\n    function generate() {\n    }\n\n    return {\n        init: init,\n        update: update,\n        onBeat: onBeat,\n        generate: generate,\n        reload: reload,\n    }\n\n}\n();"]}