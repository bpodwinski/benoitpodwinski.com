{"version":3,"sources":["DeviceOrientationControls.js"],"names":["THREE","DeviceOrientationControls","object","scope","this","rotation","reorder","enabled","deviceOrientation","screenOrientation","alpha","alphaOffsetAngle","onDeviceOrientationChangeEvent","event","onScreenOrientationChangeEvent","window","orientation","zee","euler","q0","q1","setObjectQuaternion","Vector3","Euler","Quaternion","Math","sqrt","quaternion","beta","gamma","orient","set","setFromEuler","multiply","setFromAxisAngle","connect","addEventListener","disconnect","removeEventListener","update","degToRad","updateAlphaOffsetAngle","angle","dispose"],"mappings":"AAOAA,MAAMC,0BAA4B,SAAUC,GAE3C,IAAIC,EAAQC,KAEZA,KAAKF,OAASA,EACdE,KAAKF,OAAOG,SAASC,QAAS,OAE9BF,KAAKG,SAAU,EAEfH,KAAKI,kBAAoB,GACzBJ,KAAKK,kBAAoB,EAEzBL,KAAKM,MAAQ,EACbN,KAAKO,iBAAmB,EAGa,SAAjCC,EAA2CC,GAE9CV,EAAMK,kBAAoBK,EAIU,SAAjCC,IAEHX,EAAMM,kBAAoBM,OAAOC,aAAe,EARjD,IAgBKC,EAEAC,EAEAC,EAEAC,EARDC,GAECJ,EAAM,IAAIjB,MAAMsB,QAAS,EAAG,EAAG,GAE/BJ,EAAQ,IAAIlB,MAAMuB,MAElBJ,EAAK,IAAInB,MAAMwB,WAEfJ,EAAK,IAAIpB,MAAMwB,YAAcC,KAAKC,KAAM,IAAO,EAAG,EAAGD,KAAKC,KAAM,KAE7D,SAAUC,EAAYjB,EAAOkB,EAAMC,EAAOC,GAEhDZ,EAAMa,IAAKH,EAAMlB,GAASmB,EAAO,OAEjCF,EAAWK,aAAcd,GAEzBS,EAAWM,SAAUb,GAErBO,EAAWM,SAAUd,EAAGe,iBAAkBjB,GAAOa,MAMnD1B,KAAK+B,QAAU,WAEdrB,IAEAC,OAAOqB,iBAAkB,oBAAqBtB,GAAgC,GAC9EC,OAAOqB,iBAAkB,oBAAqBxB,GAAgC,GAE9ET,EAAMI,SAAU,GAIjBH,KAAKiC,WAAa,WAEjBtB,OAAOuB,oBAAqB,oBAAqBxB,GAAgC,GACjFC,OAAOuB,oBAAqB,oBAAqB1B,GAAgC,GAEjFT,EAAMI,SAAU,GAIjBH,KAAKmC,OAAS,WAEb,IAAuB,IAAlBpC,EAAMI,QAAX,CAEA,IAAIG,EAAQP,EAAMK,kBAAkBE,MAAQV,MAAMyB,KAAKe,SAAUrC,EAAMK,kBAAkBE,OAAUN,KAAKO,iBAAmB,EACvHiB,EAAOzB,EAAMK,kBAAkBoB,KAAO5B,MAAMyB,KAAKe,SAAUrC,EAAMK,kBAAkBoB,MAAS,EAC5FC,EAAQ1B,EAAMK,kBAAkBqB,MAAQ7B,MAAMyB,KAAKe,SAAUrC,EAAMK,kBAAkBqB,OAAU,EAC/FC,EAAS3B,EAAMM,kBAAoBT,MAAMyB,KAAKe,SAAUrC,EAAMM,mBAAsB,EAExFY,EAAqBlB,EAAMD,OAAOyB,WAAYjB,EAAOkB,EAAMC,EAAOC,GAClE1B,KAAKM,MAAQA,IAIdN,KAAKqC,uBAAyB,SAAUC,GAEvCtC,KAAKO,iBAAmB+B,EACxBtC,KAAKmC,UAINnC,KAAKuC,QAAU,WAEdvC,KAAKiC,cAINjC,KAAK+B","file":"DeviceOrientationControls.js","sourcesContent":["/**\n * @author richt / http://richt.me\n * @author WestLangley / http://github.com/WestLangley\n *\n * W3C Device Orientation control (http://w3c.github.io/deviceorientation/spec-source-orientation.html)\n */\n\nTHREE.DeviceOrientationControls = function( object ) {\n\n\tvar scope = this;\n\n\tthis.object = object;\n\tthis.object.rotation.reorder( \"YXZ\" );\n\n\tthis.enabled = true;\n\n\tthis.deviceOrientation = {};\n\tthis.screenOrientation = 0;\n\n\tthis.alpha = 0;\n\tthis.alphaOffsetAngle = 0;\n\n\n\tvar onDeviceOrientationChangeEvent = function( event ) {\n\n\t\tscope.deviceOrientation = event;\n\n\t};\n\n\tvar onScreenOrientationChangeEvent = function() {\n\n\t\tscope.screenOrientation = window.orientation || 0;\n\n\t};\n\n\t// The angles alpha, beta and gamma form a set of intrinsic Tait-Bryan angles of type Z-X'-Y''\n\n\tvar setObjectQuaternion = function() {\n\n\t\tvar zee = new THREE.Vector3( 0, 0, 1 );\n\n\t\tvar euler = new THREE.Euler();\n\n\t\tvar q0 = new THREE.Quaternion();\n\n\t\tvar q1 = new THREE.Quaternion( - Math.sqrt( 0.5 ), 0, 0, Math.sqrt( 0.5 ) ); // - PI/2 around the x-axis\n\n\t\treturn function( quaternion, alpha, beta, gamma, orient ) {\n\n\t\t\teuler.set( beta, alpha, - gamma, 'YXZ' ); // 'ZXY' for the device, but 'YXZ' for us\n\n\t\t\tquaternion.setFromEuler( euler ); // orient the device\n\n\t\t\tquaternion.multiply( q1 ); // camera looks out the back of the device, not the top\n\n\t\t\tquaternion.multiply( q0.setFromAxisAngle( zee, - orient ) ); // adjust for screen orientation\n\n\t\t}\n\n\t}();\n\n\tthis.connect = function() {\n\n\t\tonScreenOrientationChangeEvent(); // run once on load\n\n\t\twindow.addEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\twindow.addEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\tscope.enabled = true;\n\n\t};\n\n\tthis.disconnect = function() {\n\n\t\twindow.removeEventListener( 'orientationchange', onScreenOrientationChangeEvent, false );\n\t\twindow.removeEventListener( 'deviceorientation', onDeviceOrientationChangeEvent, false );\n\n\t\tscope.enabled = false;\n\n\t};\n\n\tthis.update = function() {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tvar alpha = scope.deviceOrientation.alpha ? THREE.Math.degToRad( scope.deviceOrientation.alpha ) + this.alphaOffsetAngle : 0; // Z\n\t\tvar beta = scope.deviceOrientation.beta ? THREE.Math.degToRad( scope.deviceOrientation.beta ) : 0; // X'\n\t\tvar gamma = scope.deviceOrientation.gamma ? THREE.Math.degToRad( scope.deviceOrientation.gamma ) : 0; // Y''\n\t\tvar orient = scope.screenOrientation ? THREE.Math.degToRad( scope.screenOrientation ) : 0; // O\n\n\t\tsetObjectQuaternion( scope.object.quaternion, alpha, beta, gamma, orient );\n\t\tthis.alpha = alpha;\n\n\t};\n\n\tthis.updateAlphaOffsetAngle = function( angle ) {\n\n\t\tthis.alphaOffsetAngle = angle;\n\t\tthis.update();\n\n\t};\n\n\tthis.dispose = function() {\n\n\t\tthis.disconnect();\n\n\t};\n\n\tthis.connect();\n\n};\n"]}