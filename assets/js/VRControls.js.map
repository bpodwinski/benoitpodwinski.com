{"version":3,"sources":["VRControls.js"],"names":["THREE","VRControls","object","onError","vrDisplay","vrDisplays","scope","this","standingMatrix","Matrix4","frameData","window","VRFrameData","navigator","getVRDisplays","then","displays","length","scale","standing","userHeight","getVRDisplay","getStandingMatrix","update","pose","getFrameData","getPose","orientation","quaternion","fromArray","position","set","stageParameters","updateMatrix","sittingToStandingTransform","applyMatrix","setY","y","multiplyScalar","resetPose","resetSensor","console","warn","zeroSensor","dispose"],"mappings":"AAKAA,MAAMC,WAAa,SAAWC,EAAQC,GAErC,IAEIC,EAAWC,EAFXC,EAAQC,KAIRC,EAAiB,IAAIR,MAAMS,QAE3BC,EAAY,KACX,gBAAiBC,SACrBD,EAAY,IAAIE,aAmBZC,UAAUC,eAEdD,UAAUC,gBAAgBC,KAlB3B,SAAwBC,GAIA,GAFvBX,EAAaW,GAECC,OAEbb,EAAYY,EAAU,GAIjBb,GAAUA,EAAS,6BAgB1BI,KAAKW,MAAQ,EAIbX,KAAKY,UAAW,EAIhBZ,KAAKa,WAAa,IAElBb,KAAKc,aAAe,WAEnB,OAAOjB,GAIRG,KAAKO,cAAgB,WAEpB,OAAOT,GAIRE,KAAKe,kBAAoB,WAExB,OAAOd,GAIRD,KAAKgB,OAAS,WAIZ,IAAIC,EAFApB,IAICA,EAAUqB,cAEdrB,EAAUqB,aAAcf,GACxBc,EAAOd,EAAUc,MAENpB,EAAUsB,UAErBF,EAAOpB,EAAUsB,WAIQ,OAArBF,EAAKG,aAETzB,EAAO0B,WAAWC,UAAWL,EAAKG,aAIZ,OAAlBH,EAAKM,SAET5B,EAAO4B,SAASD,UAAWL,EAAKM,UAIhC5B,EAAO4B,SAASC,IAAK,EAAG,EAAG,GAIvBxB,KAAKY,WAEJf,EAAU4B,iBAEd9B,EAAO+B,eAEPzB,EAAeqB,UAAWzB,EAAU4B,gBAAgBE,4BACpDhC,EAAOiC,YAAa3B,IAIpBN,EAAO4B,SAASM,KAAMlC,EAAO4B,SAASO,EAAI9B,KAAKa,aAMjDlB,EAAO4B,SAASQ,eAAgBhC,EAAMY,SAMxCX,KAAKgC,UAAY,WAEXnC,GAEJA,EAAUmC,aAMZhC,KAAKiC,YAAc,WAElBC,QAAQC,KAAM,yDACdnC,KAAKgC,aAINhC,KAAKoC,WAAa,WAEjBF,QAAQC,KAAM,wDACdnC,KAAKgC,aAINhC,KAAKqC,QAAU,WAEdxC,EAAY","file":"VRControls.js","sourcesContent":["/**\n * @author dmarcos / https://github.com/dmarcos\n * @author mrdoob / http://mrdoob.com\n */\n\nTHREE.VRControls = function ( object, onError ) {\n\n\tvar scope = this;\n\n\tvar vrDisplay, vrDisplays;\n\n\tvar standingMatrix = new THREE.Matrix4();\n\n\tvar frameData = null;\n\tif ( 'VRFrameData' in window ) {\n\t\tframeData = new VRFrameData();\n\t}\n\n\tfunction gotVRDisplays( displays ) {\n\n\t\tvrDisplays = displays;\n\n\t\tif ( displays.length > 0 ) {\n\n\t\t\tvrDisplay = displays[ 0 ];\n\n\t\t} else {\n\n\t\t\tif ( onError ) onError( 'VR input not available.' );\n\n\t\t}\n\n\t}\n\n\tif ( navigator.getVRDisplays ) {\n\n\t\tnavigator.getVRDisplays().then( gotVRDisplays );\n\n\t}\n\n\t// the Rift SDK returns the position in meters\n\t// this scale factor allows the user to define how meters\n\t// are converted to scene units.\n\n\tthis.scale = 1;\n\n\t// If true will use \"standing space\" coordinate system where y=0 is the\n\t// floor and x=0, z=0 is the center of the room.\n\tthis.standing = false;\n\n\t// Distance from the users eyes to the floor in meters. Used when\n\t// standing=true but the VRDisplay doesn't provide stageParameters.\n\tthis.userHeight = 1.6;\n\n\tthis.getVRDisplay = function () {\n\n\t\treturn vrDisplay;\n\n\t};\n\n\tthis.getVRDisplays = function () {\n\n\t\treturn vrDisplays;\n\n\t};\n\n\tthis.getStandingMatrix = function () {\n\n\t\treturn standingMatrix;\n\n\t};\n\n\tthis.update = function () {\n\n\t\tif ( vrDisplay ) {\n\n\t\t\tvar pose;\n\n\t\t\tif ( vrDisplay.getFrameData ) {\n\n\t\t\t\tvrDisplay.getFrameData( frameData );\n\t\t\t\tpose = frameData.pose;\n\n\t\t\t} else if ( vrDisplay.getPose ) {\n\n\t\t\t\tpose = vrDisplay.getPose();\n\n\t\t\t}\n\n\t\t\tif ( pose.orientation !== null ) {\n\n\t\t\t\tobject.quaternion.fromArray( pose.orientation );\n\n\t\t\t}\n\n\t\t\tif ( pose.position !== null ) {\n\n\t\t\t\tobject.position.fromArray( pose.position );\n\n\t\t\t} else {\n\n\t\t\t\tobject.position.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( this.standing ) {\n\n\t\t\t\tif ( vrDisplay.stageParameters ) {\n\n\t\t\t\t\tobject.updateMatrix();\n\n\t\t\t\t\tstandingMatrix.fromArray( vrDisplay.stageParameters.sittingToStandingTransform );\n\t\t\t\t\tobject.applyMatrix( standingMatrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobject.position.setY( object.position.y + this.userHeight );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tobject.position.multiplyScalar( scope.scale );\n\n\t\t}\n\n\t};\n\n\tthis.resetPose = function () {\n\n\t\tif ( vrDisplay ) {\n\n\t\t\tvrDisplay.resetPose();\n\n\t\t}\n\n\t};\n\n\tthis.resetSensor = function () {\n\n\t\tconsole.warn( 'THREE.VRControls: .resetSensor() is now .resetPose().' );\n\t\tthis.resetPose();\n\n\t};\n\n\tthis.zeroSensor = function () {\n\n\t\tconsole.warn( 'THREE.VRControls: .zeroSensor() is now .resetPose().' );\n\t\tthis.resetPose();\n\n\t};\n\n\tthis.dispose = function () {\n\n\t\tvrDisplay = null;\n\n\t};\n\n};\n"]}