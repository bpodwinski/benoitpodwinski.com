{"version":3,"sources":["Mecha.js"],"names":["Mecha","groupHolder","dae","material","flotilla","bonesCount","bonesPositions","bonesPositionsTween","center","THREE","Vector3","centerTween","mouseControl","onDocumentTouchStart","event","touches","length","mouse","Vector2","x","pageX","window","innerWidth","y","pageY","innerHeight","boom","onDocumentMouseDown","clientX","clientY","raycaster","Raycaster","setFromCamera","VizHandler","getCamera","intersects","intersectObject","cubeMesh","p","point","multiplyScalar","TweenMax","to","distanceTo","z","ease","Linear","easeNone","onComplete","createGeometry","sizing","geometry","CylinderGeometry","height","segmentCount","i","vertices","vertex","halfHeight","skinIndex","Math","floor","segmentHeight","skinWeight","random","skinIndices","push","Vector4","skinWeights","createBones","bones","prevBone","Bone","position","bone","add","createMesh","mesh","SkinnedMesh","skeleton","Skeleton","castShadow","frustumCulled","bind","skeletonHelper","SkeletonHelper","linewidth","skeletonHelpers","update","time","Date","now","des","sin","spd","j","meshes","isTweening","r","PI","cos","oldCenter","copy","killTweensOf","delay","clone","set","sub","onBeat","init","events","on","Object3D","getScene","remove","dispose","SmoothShading","reflectionCube","Assets","getCubeMap","format","RGBFormat","Color","MeshStandardMaterial","skinning","bumpScale","color","metalness","roughness","shading","FlatShading","envMap","side","DoubleSide","scale","pos","initBones","reload","cubeMaterial","MeshPhongMaterial","emissive","Mesh","PlaneGeometry","rotation","receiveShadow","document","addEventListener","prerender","postrender","setEnvMap","cubeMap","getRandomOne"],"mappings":"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","file":"Mecha.js","sourcesContent":["var Mecha = function () {\n    var groupHolder;\n    var multiMaterial\n    var scene\n    var dae;\n    var timeout\n    var flotilla = []\n    var material\n    var bonesCount = 10;\n    var bonesPositions = []\n    var bonesPositionsTween = []\n    var center = new THREE.Vector3()\n    var centerTween = new THREE.Vector3()\n    var mouseControl = false;\n    function init() {\n\n        //init event listeners\n        events.on(\"update\", update);\n        events.on(\"onBeat\", onBeat);\n        groupHolder = new THREE.Object3D();\n        VizHandler.getScene().add(groupHolder);\n\n        reload()\n\n        cubeMaterial = new THREE.MeshPhongMaterial({\n            shading: THREE.FlatShading,\n            emissive: 0x333333\n        })\n\n        cubeMesh = new THREE.Mesh(new THREE.PlaneGeometry(100, 100), cubeMaterial);\n        cubeMesh.rotation.x = -Math.PI / 2\n        cubeMesh.position.y = -.25;\n        //cubeMesh.castShadow = true;\n        cubeMesh.receiveShadow = true;\n        groupHolder.add(cubeMesh);\n\n        document.addEventListener(\"mousemove\", onDocumentMouseDown);\n        document.addEventListener(\"touchmove\", onDocumentTouchStart, false);\n    }\n    function onDocumentTouchStart(event) {\n        if (event.touches.length === 1) {\n            var mouse = new THREE.Vector2();\n            mouse.x = (event.touches[ 0 ].pageX / window.innerWidth) * 2 - 1;\n            mouse.y = -(event.touches[ 0 ].pageY / window.innerHeight) * 2 + 1;\n            boom(mouse)\n        }\n    }\n    function onDocumentMouseDown(event) {\n        var mouse = new THREE.Vector2();\n        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n        boom(mouse)\n\n    }\n    function boom(mouse) {\n        var raycaster = new THREE.Raycaster();\n        raycaster.setFromCamera(mouse, VizHandler.getCamera());\n        var intersects = raycaster.intersectObject(cubeMesh, true);\n        //console.log(intersects, mouse)\n        if (intersects[ 0 ]) {\n            mouseControl = true\n            //console.log(intersects[ 0 ])\n            var p = intersects[ 0 ].point.multiplyScalar(1 / .05)\n            //center.copy()\n            TweenMax.to(center, center.distanceTo(p) * .1, {x: p.x * .6, z: p.z * .6, ease: Linear.easeNone, onComplete: function () {\n                    mouseControl = false\n                }});\n        }\n    }\n\n    function reload() {\n        if (dae) {\n            groupHolder.remove(dae);\n            dae.geometry.dispose();\n            dae = null;\n        }\n\n        var shininess = 50, specular = 0xffffff, bumpScale = .055, shading = THREE.SmoothShading;\n        var reflectionCube = Assets.getCubeMap(31)\n        reflectionCube.format = THREE.RGBFormat;\n        var roughness = 0;\n        var metalness = 1;\n        var diffuseColor = new THREE.Color(1, 1, 1);\n        material = new THREE.MeshStandardMaterial({\n            skinning: true,\n            bumpScale: bumpScale,\n            color: 0xFFFFFF,\n            metalness: metalness,\n            //fog: false,\n            roughness: roughness,\n            shading: THREE.FlatShading,\n            envMap: reflectionCube,\n            side: THREE.DoubleSide,\n            //depthWrite:false,\n            //depthTest:false,\n            //blendEquation:THREE.MinEquation\n        })\n\n        initBones();\n    }\n\n    function initBones() {\n        meshes = []\n        skeletonHelpers = [];\n\n        var segmentHeight = 5;\n        var segmentCount = 2;\n        var height = segmentHeight * segmentCount;\n        var halfHeight = height * 0.5;\n\n        var sizing = {\n            segmentHeight: segmentHeight,\n            segmentCount: segmentCount,\n            height: height,\n            halfHeight: halfHeight\n        };\n\n        for (var i = 0; i < bonesCount; i++) {\n            var mesh\n            var geometry = createGeometry(sizing);\n            var bones = createBones(sizing);\n            mesh = createMesh(geometry, bones);\n            mesh.scale.set(.05, .05, .05)\n\n            groupHolder.add(mesh);\n            meshes.push(mesh)\n\n            var pos = new THREE.Vector3();\n            pos.oldCenter = new THREE.Vector3();\n            bonesPositions.push(pos)\n            bonesPositionsTween.push(pos.clone())\n        }\n\n    }\n\n    function createGeometry(sizing) {\n\n        var geometry = new THREE.CylinderGeometry(\n                0, // radiusTop\n                3, // radiusBottom\n                sizing.height, // height\n                7, // radiusSegments\n                sizing.segmentCount * 3, // heightSegments\n                true                     // openEnded\n                );\n\n        for (var i = 0; i < geometry.vertices.length; i++) {\n\n            var vertex = geometry.vertices[ i ];\n            var y = (vertex.y + sizing.halfHeight);\n\n            var skinIndex = Math.floor(y / sizing.segmentHeight);\n            var skinWeight = (y % sizing.segmentHeight) / sizing.segmentHeight;\n\n            vertex.x -= (.5 - Math.random()) * 2\n            vertex.z -= (.5 - Math.random()) * 2\n            if (vertex.y == -sizing.segmentHeight) {\n                vertex.x = vertex.z = 0;\n            }\n\n            geometry.skinIndices.push(new THREE.Vector4(skinIndex, skinIndex + 1, 0, 0));\n            geometry.skinWeights.push(new THREE.Vector4(1 - skinWeight, skinWeight, 0, 0));\n\n        }\n\n        return geometry;\n\n    }\n\n    function createBones(sizing) {\n\n        bones = [];\n\n        var prevBone = new THREE.Bone();\n        bones.push(prevBone);\n        prevBone.position.y = -sizing.halfHeight;\n\n        for (var i = 0; i < sizing.segmentCount; i++) {\n\n            var bone = new THREE.Bone();\n            bone.position.y = sizing.segmentHeight;\n            bones.push(bone);\n            prevBone.add(bone);\n            prevBone = bone;\n\n        }\n\n        return bones;\n\n    }\n\n    function createMesh(geometry, bones) {\n\n        var mesh = new THREE.SkinnedMesh(geometry, material);\n        var skeleton = new THREE.Skeleton(bones);\n        mesh.castShadow = true;\n        mesh.frustumCulled = false;\n        //mesh.receiveShadow = true;\n\n        mesh.add(bones[ 0 ]);\n        mesh.bind(skeleton);\n\n        var skeletonHelper = new THREE.SkeletonHelper(mesh);\n        skeletonHelper.material.linewidth = 2;\n        //groupHolder.add(skeletonHelper);\n        skeletonHelpers.push(skeletonHelper)\n\n        return mesh;\n\n    }\n\n    function update() {\n\n        var time = Date.now() * 0.00010;\n        //var bone = mesh;\n\n        //Wiggle the bones\n        /*if (state.animateBones) {\n         for (var i = 0; i < mesh.skeleton.bones.length; i++) {\n         mesh.skeleton.bones[ i ].position.x = 20*Math.sin(i+3*time) * 2 / mesh.skeleton.bones.length;\n         mesh.skeleton.bones[ i ].position.z = 20*Math.sin(i+2*time) * 2 / mesh.skeleton.bones.length;\n         mesh.skeleton.bones[ i ].position.y = 10*Math.sin(i+time) * 2 / mesh.skeleton.bones.length;\n         }\n         }*/\n        var i = 0\n\n        var spd = .2\n        if (!mouseControl) {\n            var des = new THREE.Vector3(window.innerWidth / window.innerHeight * 10 * Math.sin(i + 2 * time) * Math.sin(i + 3.5 * time) * 1, 0, 15 * Math.sin(i + 1 * time) * Math.sin(i + 4.5 * time) * 1)\n            TweenMax.to(center, center.distanceTo(des) * .2, {\n                x: des.x,\n                z: des.z,\n                ease: Linear.easeNone\n            })\n        }\n        TweenMax.to(center, 0, {\n            y: 2 * Math.sin(i + time * 10), ease: Linear.easeNone\n        });\n        //var centerSpd = centerTween.distanceTo(center) / 2.5\n        //console.log(centerSpd)\n        TweenMax.to(centerTween, spd * 5, {x: center.x, y: center.y, z: center.z, ease: Linear.easeNone});\n\n        for (var j = 0; j < bonesCount; j++) {\n            var mesh = meshes[j]\n\n            if (bonesPositions[j].x == 0 || Math.random() < .003 || bonesPositions[j].distanceTo(center) > 13 && !TweenMax.isTweening(bonesPositionsTween[j])) {\n                //var i = Math.floor(Math.random() * bonesCount)\n\n                var r = 2 * Math.PI * (j / bonesCount + Math.random() / 10)\n\n                bonesPositions[j].x = center.x + Math.sin(r) * 10\n                bonesPositions[j].y = 0\n                bonesPositions[j].z = center.z + Math.cos(r) * 10\n                bonesPositions[j].oldCenter.copy(center)\n\n                //if (!TweenMax.isTweening(bonesPositionsTween[j])) {\n                TweenMax.killTweensOf(bonesPositionsTween[j])\n                TweenMax.to(bonesPositionsTween[j], spd * 2, {x: bonesPositions[j].x, z: bonesPositions[j].z})\n                TweenMax.to(bonesPositionsTween[j], spd, {y: 5})\n                TweenMax.to(bonesPositionsTween[j], spd, {delay: spd, y: bonesPositions[j].y})\n                //}\n            }\n\n            mesh.skeleton.bones[ 0 ].position.copy(centerTween)\n            mesh.skeleton.bones[ 0 ].position.add(centerTween.clone().multiplyScalar(.5))\n            mesh.skeleton.bones[ 1 ].position.set(bonesPositionsTween[j].x / 2, 5 + bonesPositionsTween[j].y / 2, bonesPositionsTween[j].z / 2)\n            mesh.skeleton.bones[ 1 ].position.sub(centerTween.clone().multiplyScalar(.5))\n            mesh.skeleton.bones[ 2 ].position.set(bonesPositionsTween[j].x, -10 + bonesPositionsTween[j].y, bonesPositionsTween[j].z)\n            mesh.skeleton.bones[ 2 ].position.sub(centerTween.clone().multiplyScalar(1))\n\n            skeletonHelpers[j].update();\n        }\n\n        //console.log(bonesPositionsTween[0].x)\n\n        /*mesh.skeleton.bones[1].position.x=0;\n         mesh.skeleton.bones[1].position.y=0;\n         mesh.skeleton.bones[1].position.z=0;\n         mesh.skeleton.bones[2].position.x=10;\n         mesh.skeleton.bones[2].position.y=10;\n         mesh.skeleton.bones[2].position.z=10;*/\n    }\n\n    function onBeat() {\n        /*if (Math.random() < .2) {\n         goBack();\n         return;\n         }\n         var point = new THREE.Vector3()\n         var s = Math.random() * Math.PI\n         var t = Math.random() * Math.PI\n         var r = 4;\n         point.x = r * Math.cos(s) * Math.sin(t)\n         point.y = r * Math.sin(s) * Math.sin(t)\n         point.z = r * Math.cos(t)\n         animate(point)*/\n    }\n\n    function prerender() {\n        //plane.visible = false;\n    }\n\n    function postrender() {\n        //plane.visible = true;\n    }\n\n    function setEnvMap(cubeMap) {\n        material.envMap = cubeMap;\n    }\n    function getRandomOne() {\n        return flotilla[Math.floor(Math.random() * flotilla.length)]\n    }\n\n    return {\n        init: init,\n        update: update,\n        onBeat: onBeat,\n        //generate: generate,\n        //generateArmy: generateArmy,\n        prerender: prerender,\n        postrender: postrender,\n        setEnvMap: setEnvMap,\n        getRandomOne: getRandomOne,\n    }\n\n}\n();"]}