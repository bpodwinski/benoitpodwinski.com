{"version":3,"sources":["FXHandler.js"],"names":["FXHandler","depthMaterial","depthRenderTarget","scene","renderer","camera","vr","composer","THREE","Group","setup","VRControls","standing","onBeat","setTimeout","onBeatEnd","onResize","width","window","innerWidth","height","innerHeight","pixelRatio","getPixelRatio","newWidth","Math","floor","newHeight","setSize","update","t","render","overrideMaterial","init","VizHandler","getControls","getScene","getRenderer","getCamera","events","on","toggle"],"mappings":"AAAA,IAAIA,UAAY,WAEZ,IAkBIC,EAAeC,EAEfC,EAAOC,EAAUC,EACjBC,EAVAC,EAAW,KAYH,IAAIC,MAAMC,MAetB,SAASC,IAEQ,IAAIF,MAAMG,WAAWN,GACvBO,UAAW,EA8D1B,SAASC,IACLC,WAAWC,EAAW,KAG1B,SAASA,KAOT,SAASC,IACL,IAAIC,EAAQC,OAAOC,WACfC,EAASF,OAAOG,YAEhBC,EAAalB,EAASmB,gBACtBC,EAAWC,KAAKC,MAAMT,EAAQK,IAAe,EAC7CK,EAAYF,KAAKC,MAAMN,EAASE,IAAe,EAC/Cf,GACAA,EAASqB,QAAQJ,EAAUG,GAInC,SAASE,EAAOC,GAERxB,IAGJF,EAAS2B,OAAO5B,EAAOE,GAGvBF,EAAM6B,iBAAmB/B,EACzBG,EAAS2B,OAAO5B,EAAOE,EAAQH,GAAmB,GAClDC,EAAM6B,iBAAmB,KAErBzB,GAEAA,EAASwB,UAMjB,MAAO,CACHE,KA1HJ,WACeC,WAAWC,cACtBhC,EAAQ+B,WAAWE,WACnBhC,EAAW8B,WAAWG,cACtBhC,EAAS6B,WAAWI,YAGpBC,OAAOC,GAAG,SAAUX,GACpBU,OAAOC,GAAG,SAAU3B,GAEpBH,KAiHAmB,OAAQA,EACRY,OAvCJ,WACI/B,KAuCAG,OAAQA,EACRG,SAAUA,GAzJF","file":"FXHandler.js","sourcesContent":["var FXHandler = function () {\n\n    var shaderTime = 0;\n    var screenW = 1920;\n    var screenH = 1080;\n    var blurriness = 3;\n    var nuts = false;\n    var bloomPass;\n    var hblurPass = null;\n    var vblurPass = null;\n    var copyPass = null;\n    var renderTarget2 = null;\n    var glowComposer = null;\n    var composer = null;\n    var blendPass = null;\n    var badTVPass = null;\n    var mirrorPass = null;\n    var dotScreenPass = null;\n    var rgbPass = null;\n    var smaaPass = null;\n    var depthMaterial, depthRenderTarget;\n    var msaaPass = null\n    var scene, renderer, camera, controls, vrControls\n    var vr, controller2, material, geom, bubbles = []\n    var material, geoms = []\n    var group = new THREE.Group()\n\n    function init() {\n        controls = VizHandler.getControls();\n        scene = VizHandler.getScene();\n        renderer = VizHandler.getRenderer();\n        camera = VizHandler.getCamera();\n\n        //EVENT HANDLERS\n        events.on(\"update\", update);\n        events.on(\"onBeat\", onBeat);\n\n        setup()\n    }\n\n    function setup() {\n\n        vrControls = new THREE.VRControls(camera);\n        vrControls.standing = true;\n        //vrControls.scale = .5;\n    }\n\n    function switchControls() {\n\n        controls.autoRotate = false;\n        controls.enabled = false;\n\n        scene.add(group)\n        group.position.y = -1.5\n\n        vr = true\n        \n        Shards.init()\n\n        /*var roz = 4\n         var directionalLight=VizHandler.getLight()\n         directionalLight.shadow.camera.near = -roz\n         directionalLight.shadow.camera.far = roz * 5\n         directionalLight.shadow.camera.left = -roz\n         directionalLight.shadow.camera.right = roz\n         directionalLight.shadow.camera.top = roz\n         directionalLight.shadow.camera.bottom = -roz\n         directionalLight.shadow.mapSize.width = 2048;\n         directionalLight.shadow.mapSize.height = 2048;\n         directionalLight.shadow.bias = 0//.001\n         VizHandler.getRenderer().shadowMap.autoUpdate = true;*/\n\n        var reflectionCube = Assets.getCubeMap(12)\n        reflectionCube.format = THREE.RGBFormat;\n        geom = new THREE.BoxGeometry(.2, .2, .2, 1, 1, 1)\n\n        var shininess = 50, specular = 0xffffff, bumpScale = .055, shading = THREE.SmoothShading;\n        var reflectionCube = Assets.getCubeMap(31)\n        reflectionCube.format = THREE.RGBFormat;\n        var roughness = .4;\n        var metalness = .9;\n        var diffuseColor = new THREE.Color(1, 1, 1);\n        material = new THREE.MeshStandardMaterial({\n            //skinning: true,\n            bumpScale: bumpScale,\n            color: diffuseColor,\n            metalness: metalness,\n            //fog: false,\n            roughness: roughness,\n            shading: THREE.FlatShading,\n            envMap: reflectionCube,\n            side: THREE.DoubleSide,\n            //depthWrite:false,\n            //depthTest:false,\n            //blendEquation:THREE.MinEquation\n        })\n\n        onResize();\n        mobile = false;\n    }\n\n    function removeBubble(bubble) {\n        scene.remove(bubble)\n    }\n\n    function onBeat() {\n        setTimeout(onBeatEnd, 300);\n    }\n\n    function onBeatEnd() {\n    }\n\n    function toggle() {\n        setup()\n    }\n\n    function onResize() {\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n\n        var pixelRatio = renderer.getPixelRatio();\n        var newWidth = Math.floor(width / pixelRatio) || 1;\n        var newHeight = Math.floor(height / pixelRatio) || 1;\n        if (composer)\n            composer.setSize(newWidth, newHeight);\n\n    }\n\n    function update(t) {\n\n        if (vr)\n            return;\n\n        renderer.render(scene, camera);\n        //renderer.shadowMap.needsUpdate = true;\n\n        scene.overrideMaterial = depthMaterial;\n        renderer.render(scene, camera, depthRenderTarget, true);\n        scene.overrideMaterial = null;\n\n        if (composer) {\n            //renderer.clear();\n            composer.render();\n        }\n\n        return;\n    }\n\n    return {\n        init: init,\n        update: update,\n        toggle: toggle,\n        onBeat: onBeat,\n        onResize: onResize\n    };\n\n}();"]}