{"version":3,"sources":["SimplexNoise.js"],"names":["SimplexNoise","r","undefined","Math","this","grad3","grad4","p","i","floor","random","perm","simplex","prototype","dot","g","x","y","dot3","z","dot4","w","noise","xin","yin","i1","j1","s","sqrt","j","G2","t","x0","y0","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","noise3d","zin","k1","i2","j2","k2","k","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","l1","l2","i3","j3","k3","l3","F4","G4","l","w0","c","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4"],"mappings":"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","file":"SimplexNoise.js","sourcesContent":["// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n// Joshua Koo zz85nus@gmail.com \n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nvar SimplexNoise = function(r) {\n\tif (r == undefined) r = Math;\n  this.grad3 = [[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0], \n                                 [1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1], \n                                 [0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]]; \n\n  this.grad4 = [[0,1,1,1], [0,1,1,-1], [0,1,-1,1], [0,1,-1,-1],\n\t     [0,-1,1,1], [0,-1,1,-1], [0,-1,-1,1], [0,-1,-1,-1],\n\t     [1,0,1,1], [1,0,1,-1], [1,0,-1,1], [1,0,-1,-1],\n\t     [-1,0,1,1], [-1,0,1,-1], [-1,0,-1,1], [-1,0,-1,-1],\n\t     [1,1,0,1], [1,1,0,-1], [1,-1,0,1], [1,-1,0,-1],\n\t     [-1,1,0,1], [-1,1,0,-1], [-1,-1,0,1], [-1,-1,0,-1],\n\t     [1,1,1,0], [1,1,-1,0], [1,-1,1,0], [1,-1,-1,0],\n\t     [-1,1,1,0], [-1,1,-1,0], [-1,-1,1,0], [-1,-1,-1,0]];\n\n  this.p = [];\n  for (var i=0; i<256; i++) {\n\t  this.p[i] = Math.floor(r.random()*256);\n  }\n  // To remove the need for index wrapping, double the permutation table length \n  this.perm = []; \n  for(var i=0; i<512; i++) {\n\t\tthis.perm[i]=this.p[i & 255];\n\t} \n\n  // A lookup table to traverse the simplex around a given point in 4D. \n  // Details can be found where this table is used, in the 4D noise method. \n  this.simplex = [ \n    [0,1,2,3],[0,1,3,2],[0,0,0,0],[0,2,3,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,2,3,0], \n    [0,2,1,3],[0,0,0,0],[0,3,1,2],[0,3,2,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[1,3,2,0], \n    [0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0], \n    [1,2,0,3],[0,0,0,0],[1,3,0,2],[0,0,0,0],[0,0,0,0],[0,0,0,0],[2,3,0,1],[2,3,1,0], \n    [1,0,2,3],[1,0,3,2],[0,0,0,0],[0,0,0,0],[0,0,0,0],[2,0,3,1],[0,0,0,0],[2,1,3,0], \n    [0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0], \n    [2,0,1,3],[0,0,0,0],[0,0,0,0],[0,0,0,0],[3,0,1,2],[3,0,2,1],[0,0,0,0],[3,1,2,0], \n    [2,1,0,3],[0,0,0,0],[0,0,0,0],[0,0,0,0],[3,1,0,2],[0,0,0,0],[3,2,0,1],[3,2,1,0]]; \n};\n\nSimplexNoise.prototype.dot = function(g, x, y) { \n\treturn g[0]*x + g[1]*y;\n};\n\nSimplexNoise.prototype.dot3 = function(g, x, y, z) {\n  return g[0]*x + g[1]*y + g[2]*z; \n}\n\nSimplexNoise.prototype.dot4 = function(g, x, y, z, w) {\n  return g[0]*x + g[1]*y + g[2]*z + g[3]*w;\n};\n\nSimplexNoise.prototype.noise = function(xin, yin) { \n  var n0, n1, n2; // Noise contributions from the three corners \n  // Skew the input space to determine which simplex cell we're in \n  var F2 = 0.5*(Math.sqrt(3.0)-1.0); \n  var s = (xin+yin)*F2; // Hairy factor for 2D \n  var i = Math.floor(xin+s); \n  var j = Math.floor(yin+s); \n  var G2 = (3.0-Math.sqrt(3.0))/6.0; \n  var t = (i+j)*G2; \n  var X0 = i-t; // Unskew the cell origin back to (x,y) space \n  var Y0 = j-t; \n  var x0 = xin-X0; // The x,y distances from the cell origin \n  var y0 = yin-Y0; \n  // For the 2D case, the simplex shape is an equilateral triangle. \n  // Determine which simplex we are in. \n  var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords \n  if(x0>y0) {i1=1; j1=0;} // lower triangle, XY order: (0,0)->(1,0)->(1,1) \n  else {i1=0; j1=1;}      // upper triangle, YX order: (0,0)->(0,1)->(1,1) \n  // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and \n  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where \n  // c = (3-sqrt(3))/6 \n  var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords \n  var y1 = y0 - j1 + G2; \n  var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords \n  var y2 = y0 - 1.0 + 2.0 * G2; \n  // Work out the hashed gradient indices of the three simplex corners \n  var ii = i & 255; \n  var jj = j & 255; \n  var gi0 = this.perm[ii+this.perm[jj]] % 12; \n  var gi1 = this.perm[ii+i1+this.perm[jj+j1]] % 12; \n  var gi2 = this.perm[ii+1+this.perm[jj+1]] % 12; \n  // Calculate the contribution from the three corners \n  var t0 = 0.5 - x0*x0-y0*y0; \n  if(t0<0) n0 = 0.0; \n  else { \n    t0 *= t0; \n    n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0);  // (x,y) of grad3 used for 2D gradient \n  } \n  var t1 = 0.5 - x1*x1-y1*y1; \n  if(t1<0) n1 = 0.0; \n  else { \n    t1 *= t1; \n    n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1); \n  }\n  var t2 = 0.5 - x2*x2-y2*y2; \n  if(t2<0) n2 = 0.0; \n  else { \n    t2 *= t2; \n    n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2); \n  } \n  // Add contributions from each corner to get the final noise value. \n  // The result is scaled to return values in the interval [-1,1]. \n  return 70.0 * (n0 + n1 + n2); \n};\n\n// 3D simplex noise \nSimplexNoise.prototype.noise3d = function(xin, yin, zin) { \n  var n0, n1, n2, n3; // Noise contributions from the four corners \n  // Skew the input space to determine which simplex cell we're in \n  var F3 = 1.0/3.0; \n  var s = (xin+yin+zin)*F3; // Very nice and simple skew factor for 3D \n  var i = Math.floor(xin+s); \n  var j = Math.floor(yin+s); \n  var k = Math.floor(zin+s); \n  var G3 = 1.0/6.0; // Very nice and simple unskew factor, too \n  var t = (i+j+k)*G3; \n  var X0 = i-t; // Unskew the cell origin back to (x,y,z) space \n  var Y0 = j-t; \n  var Z0 = k-t; \n  var x0 = xin-X0; // The x,y,z distances from the cell origin \n  var y0 = yin-Y0; \n  var z0 = zin-Z0; \n  // For the 3D case, the simplex shape is a slightly irregular tetrahedron. \n  // Determine which simplex we are in. \n  var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords \n  var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords \n  if(x0>=y0) { \n    if(y0>=z0) \n      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; } // X Y Z order \n      else if(x0>=z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; } // X Z Y order \n      else { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; } // Z X Y order \n    } \n  else { // x0<y0 \n    if(y0<z0) { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; } // Z Y X order \n    else if(x0<z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; } // Y Z X order \n    else { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; } // Y X Z order \n  } \n  // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z), \n  // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and \n  // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where \n  // c = 1/6.\n  var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords \n  var y1 = y0 - j1 + G3; \n  var z1 = z0 - k1 + G3; \n  var x2 = x0 - i2 + 2.0*G3; // Offsets for third corner in (x,y,z) coords \n  var y2 = y0 - j2 + 2.0*G3; \n  var z2 = z0 - k2 + 2.0*G3; \n  var x3 = x0 - 1.0 + 3.0*G3; // Offsets for last corner in (x,y,z) coords \n  var y3 = y0 - 1.0 + 3.0*G3; \n  var z3 = z0 - 1.0 + 3.0*G3; \n  // Work out the hashed gradient indices of the four simplex corners \n  var ii = i & 255; \n  var jj = j & 255; \n  var kk = k & 255; \n  var gi0 = this.perm[ii+this.perm[jj+this.perm[kk]]] % 12; \n  var gi1 = this.perm[ii+i1+this.perm[jj+j1+this.perm[kk+k1]]] % 12; \n  var gi2 = this.perm[ii+i2+this.perm[jj+j2+this.perm[kk+k2]]] % 12; \n  var gi3 = this.perm[ii+1+this.perm[jj+1+this.perm[kk+1]]] % 12; \n  // Calculate the contribution from the four corners \n  var t0 = 0.6 - x0*x0 - y0*y0 - z0*z0; \n  if(t0<0) n0 = 0.0; \n  else { \n    t0 *= t0; \n    n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0); \n  }\n  var t1 = 0.6 - x1*x1 - y1*y1 - z1*z1; \n  if(t1<0) n1 = 0.0; \n  else { \n    t1 *= t1; \n    n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1); \n  } \n  var t2 = 0.6 - x2*x2 - y2*y2 - z2*z2; \n  if(t2<0) n2 = 0.0; \n  else { \n    t2 *= t2; \n    n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2); \n  } \n  var t3 = 0.6 - x3*x3 - y3*y3 - z3*z3; \n  if(t3<0) n3 = 0.0; \n  else { \n    t3 *= t3; \n    n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3); \n  } \n  // Add contributions from each corner to get the final noise value. \n  // The result is scaled to stay just inside [-1,1] \n  return 32.0*(n0 + n1 + n2 + n3); \n};\n\n// 4D simplex noise\nSimplexNoise.prototype.noise4d = function( x, y, z, w ) {\n\t// For faster and easier lookups\n\tvar grad4 = this.grad4;\n\tvar simplex = this.simplex;\n\tvar perm = this.perm;\n\t\n   // The skewing and unskewing factors are hairy again for the 4D case\n   var F4 = (Math.sqrt(5.0)-1.0)/4.0;\n   var G4 = (5.0-Math.sqrt(5.0))/20.0;\n   var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n   // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n   var s = (x + y + z + w) * F4; // Factor for 4D skewing\n   var i = Math.floor(x + s);\n   var j = Math.floor(y + s);\n   var k = Math.floor(z + s);\n   var l = Math.floor(w + s);\n   var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n   var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n   var Y0 = j - t;\n   var Z0 = k - t;\n   var W0 = l - t;\n   var x0 = x - X0;  // The x,y,z,w distances from the cell origin\n   var y0 = y - Y0;\n   var z0 = z - Z0;\n   var w0 = w - W0;\n\n   // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n   // To find out which of the 24 possible simplices we're in, we need to\n   // determine the magnitude ordering of x0, y0, z0 and w0.\n   // The method below is a good way of finding the ordering of x,y,z,w and\n   // then find the correct traversal order for the simplex we’re in.\n   // First, six pair-wise comparisons are performed between each possible pair\n   // of the four coordinates, and the results are used to add up binary bits\n   // for an integer index.\n   var c1 = (x0 > y0) ? 32 : 0;\n   var c2 = (x0 > z0) ? 16 : 0;\n   var c3 = (y0 > z0) ? 8 : 0;\n   var c4 = (x0 > w0) ? 4 : 0;\n   var c5 = (y0 > w0) ? 2 : 0;\n   var c6 = (z0 > w0) ? 1 : 0;\n   var c = c1 + c2 + c3 + c4 + c5 + c6;\n   var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n   var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n   var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n   // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n   // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n   // impossible. Only the 24 indices which have non-zero entries make any sense.\n   // We use a thresholding to set the coordinates in turn from the largest magnitude.\n   // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n   i1 = simplex[c][0]>=3 ? 1 : 0;\n   j1 = simplex[c][1]>=3 ? 1 : 0;\n   k1 = simplex[c][2]>=3 ? 1 : 0;\n   l1 = simplex[c][3]>=3 ? 1 : 0;\n   // The number 2 in the \"simplex\" array is at the second largest coordinate.\n   i2 = simplex[c][0]>=2 ? 1 : 0;\n   j2 = simplex[c][1]>=2 ? 1 : 0;    k2 = simplex[c][2]>=2 ? 1 : 0;\n   l2 = simplex[c][3]>=2 ? 1 : 0;\n   // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n   i3 = simplex[c][0]>=1 ? 1 : 0;\n   j3 = simplex[c][1]>=1 ? 1 : 0;\n   k3 = simplex[c][2]>=1 ? 1 : 0;\n   l3 = simplex[c][3]>=1 ? 1 : 0;\n   // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n   var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n   var y1 = y0 - j1 + G4;\n   var z1 = z0 - k1 + G4;\n   var w1 = w0 - l1 + G4;\n   var x2 = x0 - i2 + 2.0*G4; // Offsets for third corner in (x,y,z,w) coords\n   var y2 = y0 - j2 + 2.0*G4;\n   var z2 = z0 - k2 + 2.0*G4;\n   var w2 = w0 - l2 + 2.0*G4;\n   var x3 = x0 - i3 + 3.0*G4; // Offsets for fourth corner in (x,y,z,w) coords\n   var y3 = y0 - j3 + 3.0*G4;\n   var z3 = z0 - k3 + 3.0*G4;\n   var w3 = w0 - l3 + 3.0*G4;\n   var x4 = x0 - 1.0 + 4.0*G4; // Offsets for last corner in (x,y,z,w) coords\n   var y4 = y0 - 1.0 + 4.0*G4;\n   var z4 = z0 - 1.0 + 4.0*G4;\n   var w4 = w0 - 1.0 + 4.0*G4;\n   // Work out the hashed gradient indices of the five simplex corners\n   var ii = i & 255;\n   var jj = j & 255;\n   var kk = k & 255;\n   var ll = l & 255;\n   var gi0 = perm[ii+perm[jj+perm[kk+perm[ll]]]] % 32;\n   var gi1 = perm[ii+i1+perm[jj+j1+perm[kk+k1+perm[ll+l1]]]] % 32;\n   var gi2 = perm[ii+i2+perm[jj+j2+perm[kk+k2+perm[ll+l2]]]] % 32;\n   var gi3 = perm[ii+i3+perm[jj+j3+perm[kk+k3+perm[ll+l3]]]] % 32;\n   var gi4 = perm[ii+1+perm[jj+1+perm[kk+1+perm[ll+1]]]] % 32;\n   // Calculate the contribution from the five corners\n   var t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;\n   if(t0<0) n0 = 0.0;\n   else {\n     t0 *= t0;\n     n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);\n   }\n  var t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;\n   if(t1<0) n1 = 0.0;\n   else {\n     t1 *= t1;\n     n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);\n   }\n  var t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;\n   if(t2<0) n2 = 0.0;\n   else {\n     t2 *= t2;\n     n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);\n   }   var t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;\n   if(t3<0) n3 = 0.0;\n   else {\n     t3 *= t3;\n     n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);\n   }\n  var t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;\n   if(t4<0) n4 = 0.0;\n   else {\n     t4 *= t4;\n     n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);\n   }\n   // Sum up and scale the result to cover the range [-1,1]\n   return 27.0 * (n0 + n1 + n2 + n3 + n4);\n};\n"]}